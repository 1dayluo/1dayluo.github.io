import{_ as u}from"./ValaxyMain.vue_vue_type_style_index_0_lang-DRVqeRiY.js";import{a as p,p as c,o as y,c as g,w as t,f as _,k as r,r as s,g as e,h as n}from"./app-CzjF7NIc.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-17i98rOK.js";import"./YunCard.vue_vue_type_script_setup_true_lang-Da3dkqK-.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-BsneHNVS.js";import"./index-C7yU5XnD.js";const k=e("h1",{id:"introduction-to-web-cache-poisoning",tabindex:"-1"},[n("Introduction to web cache poisoning "),e("a",{class:"header-anchor",href:"#introduction-to-web-cache-poisoning","aria-label":'Permalink to "Introduction to web cache poisoning"'},"​")],-1),f=e("p",null,"原文链接：",-1),m=e("p",null,[e("a",{href:"https://www.netsparker.com/blog/web-security/web-cache-poisoning-introduction/",target:"_blank",rel:"noreferrer"},"Introduction to web cache poisoning")],-1),b=e("p",null,"写在开头：具体实践还是要做题。题目没有刷到这个专题，先做阅读了解。 英语能力太差了，整体时间有点安排不过来。所以视频的翻译和笔记记录停留在了[32:30]（视频为文章内提到的视频，非常不错，讲的很清晰）。等自己有时间继续补充这篇文章。",-1),w=e("h2",{id:"web-caching",tabindex:"-1"},[n("web caching "),e("a",{class:"header-anchor",href:"#web-caching","aria-label":'Permalink to "web caching"'},"​")],-1),q=e("p",null,"和客户端缓存类似，客户端缓存：暂时地保存图片到本地，下次访问便会很快。",-1),v=e("p",null,"内容交付链下，",-1),T=e("p",null,"web服务器，中间系统，内容交付网络（CNDs）都被用于web缓存，以应对多个客户端请求（无需每次建索原始内容）。有利于负载均衡。",-1),P=e("p",null,"如图，左边为client，中间为caching server，最右为web application。",-1),S=e("figure",null,[e("img",{src:"https://i.loli.net/2021/07/28/wjbuyLzdKNFncJS.png",alt:"Introduction%20to%20web%20cache%20poisoning%20ee64dd99798e4715bc71cd0bf544f5c4/Untitled.png",loading:"lazy",decoding:"async"})],-1),U=e("p",null,"caching server会解压request中的cache key，然后查看是否在存储的key中是否有匹配该cache key的数据（视频在讲接该图的时候还解释了如果是实际架构该如何，例如，redis+mongo，或在niginx下如何配置caching server）",-1),E=e("figure",null,[e("img",{src:"https://i.loli.net/2021/07/28/9pNK82QAT65mvsl.png",alt:"Introduction%20to%20web%20cache%20poisoning%20ee64dd99798e4715bc71cd0bf544f5c4/Untitled%201.png",loading:"lazy",decoding:"async"})],-1),$=e("p",null,"如果一个请求，你第一次发送，测算response响应时间为2s，第二次为0.25s，那么服务器很有可能缓存了你的请求",-1),O=e("h2",{id:"cache-keys-work",tabindex:"-1"},[n("cache keys work "),e("a",{class:"header-anchor",href:"#cache-keys-work","aria-label":'Permalink to "cache keys work"'},"​")],-1),G=e("p",null,[n("确认一个东西是否被缓存，缓存服务器会保存一张全部缓存内容的index表。然后用"),e("strong",null,"cache key"),n("来查找请求。")],-1),x=e("p",null,"直观上去理解cache key：",-1),I=e("ul",null,[e("li",null,[e("p",null,"本质上，是用于缓存服务器的request的签名")]),e("li",null,[e("p",null,"决定两个单独的请求是否加载同样的资源")]),e("li",null,[e("p",null,"每个缓存机制计算cache key都不同，但大多时候它就像获取request的基础部分，并把全部内容拼接成字符串一样简单。"),e("figure",null,[e("img",{src:"https://i.loli.net/2021/07/28/h169is3AjoIFNOt.png",alt:"Introduction%20to%20web%20cache%20poisoning%20ee64dd99798e4715bc71cd0bf544f5c4/Untitled%202.png",loading:"lazy",decoding:"async"})])]),e("li",null,[e("p",null,"例如，以上请求，加入cache key的有GET和HOST两行，那么如果有独立请求在request中有同样的两行（即使其他不一样），就会被缓存服务器所处理对应的响应。")]),e("li",null,[e("p",null,"没有被加入cache key的被称为：unkeyed input。（同样的例子，例如，User-Agent，Accept，Cookie）")]),e("li",null,[e("p",null,[n("[21:20]视频中提问的回答：有时缓存服务器也会将有关内容发送到user的浏览器中，例如header中的"),e("code",null,"xslash"),n(" (关联着对应的版本）")])])],-1),H=e("p",null,"cache key的组成：",-1),j=e("ul",null,[e("li",null,"request中的不同字符 且能反映header中的value")],-1),z=e("p",null,"注意：",-1),N=e("p",null,"Each caching mechanism will have its own way of building the cache key.",-1),D=e("p",null,"request请求中包含cache key的部分叫keyed inputs。剩余部分叫unkeyed inputs。",-1),C=e("p",null,"所有的cache key都必须至少包含path和host",-1),L=e("p",null,"但是取决于缓存机制和应用程序，其他的header 的值也可能被用。",-1),R=e("p",null,[e("strong",null,"理解cache busting")],-1),A=e("ul",null,[e("li",null,"一般缓存服务器中，requery的参数，Origin都被加入cache key的表中。一般测试写POC的时候，通常会构造origin（仅作为漏洞存在证明，防止其他普通用户受害）"),e("li",null,"会选择位于cache key的参数并修改，但修改该参数时不会影响整体服务器。"),e("li",null,"是调查与缓存有关的漏洞和攻击的重要方法。"),e("li",null,"允许渗透测试者实验缓存投毒而不影响其他用户。")],-1),F=e("h2",{id:"web-cache-poisoning",tabindex:"-1"},[n("web cache poisoning "),e("a",{class:"header-anchor",href:"#web-cache-poisoning","aria-label":'Permalink to "web cache poisoning"'},"​")],-1),X=e("p",null,"web缓存投毒就是偷偷把web缓存中的数据修改成不合法的内容。通常，被修改的内容本身不是攻击，而是作为可利用漏洞（payload）的载体。通常此处的漏洞多为：",-1),V=e("ul",null,[e("li",null,"cross-site scripting(XSS)"),e("li",null,[e("a",{href:"https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/http-header-injection/",target:"_blank",rel:"noreferrer"},"host header injection")])],-1),B=e("p",null,"web缓存投毒很难实现，也很难被发现和排错。",-1),K=e("p",null,"这里有一些方法能够实现修改缓存，取决于缓存机制，应用程序和浏览器。",-1),M=e("p",null,[e("strong",null,"理解缓存投毒")],-1),J=e("p",null,"如图，左图和右图都是两个单独的request。在这个例子中Cookie是unkeyed input。没有被加入cache key。",-1),Z=e("p",null,[n("第二个请求更改了cookie处的language，但是返回的仍然是"),e("code",null,"en"),n("。这是为什么呢?")],-1),Q=e("p",null,[n("因为第二个请求的"),e("code",null,"GET"),n("和"),e("code",null,"HOST"),n("都和第一个请求一样，而同时"),e("code",null,"GET"),n("和"),e("code",null,"HOST"),n("同时作为keyed input存储在cache key中的。所以对于缓存服务器来说，二者是相同的请求。第二次请求时，会读取第一次请求的缓存。")],-1),W=e("figure",null,[e("img",{src:"https://i.loli.net/2021/07/28/nagY7d9xrMK61Lp.png",alt:"Introduction%20to%20web%20cache%20poisoning%20ee64dd99798e4715bc71cd0bf544f5c4/Untitled%203.png",loading:"lazy",decoding:"async"})],-1),Y=e("h2",{id:"ways-of-modifying-caches",tabindex:"-1"},[n("ways of modifying caches "),e("a",{class:"header-anchor",href:"#ways-of-modifying-caches","aria-label":'Permalink to "ways of modifying caches"'},"​")],-1),ee=e("h3",{id:"reflected-unkeyed-headers",tabindex:"-1"},[n("Reflected unkeyed headers "),e("a",{class:"header-anchor",href:"#reflected-unkeyed-headers","aria-label":'Permalink to "Reflected unkeyed headers"'},"​")],-1),ne=e("p",null,"如果该应用程序的response的响应直接响应unkeyed header，这种情况很容易被缓存投毒。因为如果有header是unkeyed的话，它的值就不能成为cache key的一部分（看笔记中的cache keys work)。这个header就不参与缓存命中。",-1),te=e("p",null,"如果攻击者发送了一个请求，且只有这个header被恶意修改，那么会有新的针对此request的response被缓存，便完成恶意负载。（恶意负载例如：针对跨站脚本的漏洞）。用户随后的请求内存将匹配到同样的cache key，并且会从缓存中收到该恶意版本。",-1),oe=e("h3",{id:"unkeyed-port",tabindex:"-1"},[n("Unkeyed port "),e("a",{class:"header-anchor",href:"#unkeyed-port","aria-label":'Permalink to "Unkeyed port"'},"​")],-1),se=e("p",null,"如果端口不参与组成cache key，就有可能被缓存投毒利用不可访问的端口来实现拒绝服务（DoS）攻击。如果攻击者发送了一个包含上述的端口数字的request请求，并且错误的response被缓存。用户访问/request请求同样的URL即使没有端口的情况下，也会立即得到被缓存的错误而不是期待的页面内容。",-1),le=e("p",null,"这将会使页面无法被用户访问到，实际上只针对特定的URL执行微妙的DoS攻击",-1),ae=e("h3",{id:"unkeyed-request-method",tabindex:"-1"},[n("Unkeyed request method "),e("a",{class:"header-anchor",href:"#unkeyed-request-method","aria-label":'Permalink to "Unkeyed request method"'},"​")],-1),ie=e("p",null,"一些时候，HTTP的请求方式（GET,POST,PUT等等）可能不参与组成cache key的部分。应用程序容易受到参数污染（parameter pollution)的攻击。这很有可能发送一个POST请求，包含修改过参数的恶意的payload——通常去实现XSS攻击。",-1),ce=e("h3",{id:"fat-get-requests",tabindex:"-1"},[n("Fat GET requests "),e("a",{class:"header-anchor",href:"#fat-get-requests","aria-label":'Permalink to "Fat GET requests"'},"​")],-1),re=e("p",null,"如果应用程序接受，非标准的带有body的GET请求（所谓的fat GET requests）和request中的body部分 都是unkeyede且被response响应。这可以为缓存投毒的另一个途径。",-1),de=e("p",null,"攻击者可能在GET请求中包含恶意负载。对应的response被缓存（因为request body不是key的部分），用户发送常规get请求会命中同样的cache key，并接受到被投毒的response。",-1),he=e("p",null,[n("一些案例中，会在头部用到"),e("code",null,"X-HTTP-Method-Override")],-1),ue=e("p",null,"去欺骗应用程序：将一个fat GET请求视作普通的POST请求。",-1),pe=e("h3",{id:"unkeyed-query-string",tabindex:"-1"},[n("Unkeyed query string "),e("a",{class:"header-anchor",href:"#unkeyed-query-string","aria-label":'Permalink to "Unkeyed query string"'},"​")],-1),ye=e("p",null,"最后，如果一带查询字符的request是unkeyed并且会反应在response中。就可能注入恶意负载（payload）在查询参数上，且response被缓存。客户端发送的request与之匹配（且没有带参数）就会接受到被投毒的response。",-1),ge=e("p",null,"由于该攻击是典型的脚本注入，可以说这种方法是将反射型 XSS 转换为存储型 XSS，并将脚本存储在 Web 缓存中。虽然如果直接使用这种技术很容易被发现，但它可能会在更复杂的场景中逃避检测。",-1),_e=e("h2",{id:"preventing",tabindex:"-1"},[n("Preventing "),e("a",{class:"header-anchor",href:"#preventing","aria-label":'Permalink to "Preventing"'},"​")],-1),ke=e("ul",null,[e("li",null,"规范化HOST标头：比如防止DoS，用默认端口，被生成cache key前在Host header中去掉端口号。"),e("li",null,"只缓存GET和HEAD的请求：repost和其他HTTP请求需要服务器直接相应。response全部都用缓存技术是没有太大的好处的"),e("li",null,"不要允许fat GET的请求。"),e("li",null,"(Optional) Disable caching headers")],-1),Ue={__name:"ji-zhu-yue-du-web-huan-cun-tou-du",setup(fe,{expose:d}){const l=JSON.parse('{"title":"[技术阅读]web缓存投毒","description":"","frontmatter":{"title":"[技术阅读]web缓存投毒","date":"2021-07-28T13:39:59.000Z","tags":["技术阅读","知识点巩固"],"published":true,"hideInList":false,"feature":null,"isTop":false},"headers":[{"level":2,"title":"web caching","slug":"web-caching","link":"#web-caching","children":[]},{"level":2,"title":"cache keys work","slug":"cache-keys-work","link":"#cache-keys-work","children":[]},{"level":2,"title":"web cache poisoning","slug":"web-cache-poisoning","link":"#web-cache-poisoning","children":[]},{"level":2,"title":"ways of modifying caches","slug":"ways-of-modifying-caches","link":"#ways-of-modifying-caches","children":[{"level":3,"title":"Reflected unkeyed headers","slug":"reflected-unkeyed-headers","link":"#reflected-unkeyed-headers","children":[]},{"level":3,"title":"Unkeyed port","slug":"unkeyed-port","link":"#unkeyed-port","children":[]},{"level":3,"title":"Unkeyed request method","slug":"unkeyed-request-method","link":"#unkeyed-request-method","children":[]},{"level":3,"title":"Fat GET requests","slug":"fat-get-requests","link":"#fat-get-requests","children":[]},{"level":3,"title":"Unkeyed query string","slug":"unkeyed-query-string","link":"#unkeyed-query-string","children":[]}]},{"level":2,"title":"Preventing","slug":"preventing","link":"#preventing","children":[]}],"relativePath":"pages/posts/history/ji-zhu-yue-du-web-huan-cun-tou-du.md","path":"/home/runner/work/1dayluo.github.io/1dayluo.github.io/pages/posts/history/ji-zhu-yue-du-web-huan-cun-tou-du.md","lastUpdated":1714218709000}'),i=p(),a=l.frontmatter||{};return i.meta.frontmatter=Object.assign(i.meta.frontmatter||{},l.frontmatter||{}),c("pageData",l),c("valaxy:frontmatter",a),globalThis.$frontmatter=a,d({frontmatter:{title:"[技术阅读]web缓存投毒",date:"2021-07-28T13:39:59.000Z",tags:["技术阅读","知识点巩固"],published:!0,hideInList:!1,feature:null,isTop:!1}}),(o,be)=>{const h=u;return y(),g(h,{frontmatter:_(a)},{"main-content-md":t(()=>[r(" more "),k,f,m,b,w,q,v,T,P,S,r(" more "),U,E,$,O,G,x,I,H,j,z,N,D,C,L,R,A,F,X,V,B,K,M,J,Z,Q,W,Y,ee,ne,te,oe,se,le,ae,ie,ce,re,de,he,ue,pe,ye,ge,_e,ke]),"main-header":t(()=>[s(o.$slots,"main-header")]),"main-header-after":t(()=>[s(o.$slots,"main-header-after")]),"main-nav":t(()=>[s(o.$slots,"main-nav")]),"main-content":t(()=>[s(o.$slots,"main-content")]),"main-content-after":t(()=>[s(o.$slots,"main-content-after")]),"main-nav-before":t(()=>[s(o.$slots,"main-nav-before")]),"main-nav-after":t(()=>[s(o.$slots,"main-nav-after")]),comment:t(()=>[s(o.$slots,"comment")]),footer:t(()=>[s(o.$slots,"footer")]),aside:t(()=>[s(o.$slots,"aside")]),"aside-custom":t(()=>[s(o.$slots,"aside-custom")]),default:t(()=>[s(o.$slots,"default")]),_:3},8,["frontmatter"])}}};export{Ue as default};
